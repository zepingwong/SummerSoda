(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{621:function(e,t,n){"use strict";n.r(t);var s=n(2),a=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"_1-生成配置文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-生成配置文件"}},[e._v("#")]),e._v(" "),t("em",[t("strong",[e._v("1.生成配置文件")])])]),e._v(" "),t("p",[e._v("默认情况下，配置文件 "),t("code",[e._v("~/.jupyter/jupyter_notebook_config.py")]),e._v(" 并不存在，需要自行创建。使用下列命令生成配置文件：")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("jupyter notebook --generate-config\n")])])]),t("p",[e._v("如果是 root 用户执行上面的命令，会发生一个问题：")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("Running as root it not recommended. Use --allow-root to bypass.\n")])])]),t("p",[e._v("提示信息很明显，root 用户执行时需要加上 "),t("code",[e._v("--allow-root")]),e._v(" 选项。")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("jupyter notebook --generate-config --allow-config\n")])])]),t("p",[e._v("执行成功后，会出现下面的信息：")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("Writing default config to: /root/.jupyter/jupyter_notebook_config.py\n")])])]),t("p",[e._v("当然Windows操作系统的话应该是在")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("Writing default config to: C:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("Users"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("you"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v(".jupyter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("jupyter_notebook_config.py\n")])])]),t("h2",{attrs:{id:"_2-生成密码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-生成密码"}},[e._v("#")]),e._v(" "),t("em",[t("strong",[e._v("2. 生成密码")])])]),e._v(" "),t("h3",{attrs:{id:"自动生成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动生成"}},[e._v("#")]),e._v(" "),t("em",[t("strong",[e._v("自动生成")])])]),e._v(" "),t("p",[e._v("从 jupyter notebook 5.0 版本开始，提供了一个命令来设置密码："),t("code",[e._v("jupyter notebook password")]),e._v("，生成的密码存储在 "),t("code",[e._v("jupyter_notebook_config.json")])]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("$ jupyter notebook password\nEnter password:  ****\nVerify password: ****\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("NotebookPasswordApp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Wrote hashed password to /Users/you/.jupyter/jupyter_notebook_config.json\n")])])]),t("h3",{attrs:{id:"手动生成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手动生成"}},[e._v("#")]),e._v(" "),t("em",[t("strong",[e._v("手动生成")])])]),e._v(" "),t("p",[e._v("除了使用提供的命令，也可以通过手动安装，我是使用的手动安装，因为"),t("code",[e._v("jupyter notebook password")]),e._v(" 出来一堆内容，没耐心看。打开 ipython 执行下面内容：")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("In "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": from notebook.auth "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("import")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("passwd")]),e._v("\nIn "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": passwd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nEnter password:\nVerify password:\nOut"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'sha1:67c9e60bb8b6:9ffede0825894254b2e042ea597d771089e11aed'")]),e._v("\n")])])]),t("p",[t("code",[e._v("sha1:67c9e60bb8b6:9ffede0825894254b2e042ea597d771089e11aed")]),e._v(" 这一串就是要在 "),t("code",[e._v("jupyter_notebook_config.py")]),e._v(" 添加的密码")]),e._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[e._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("NotebookApp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("password "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("u'sha1:67c9e60bb8b6:9ffede0825894254b2e042ea597d771089e11aed'")]),e._v("\n")])])]),t("h2",{attrs:{id:"_3-配置远程访问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-配置远程访问"}},[e._v("#")]),e._v(" "),t("em",[t("strong",[e._v("3.配置远程访问")])])]),e._v(" "),t("p",[e._v("在 "),t("code",[e._v("jupyter_notebook_config.py")]),e._v(" 中找到下面的行，取消注释并修改，或直接添加如下内容")]),e._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[e._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("NotebookApp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("ip"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'*'")]),e._v("\nc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("NotebookApp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("password "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("u'sha:ce...刚才复制的那个密文'")]),e._v("\nc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("NotebookApp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("open_browser "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("False")]),e._v("\nc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("NotebookApp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("port "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8888")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#可自行指定一个端口, 访问时使用该端口")]),e._v("\n")])])]),t("p",[e._v("以上设置完以后就可以在服务器上启动 jupyter notebook，"),t("code",[e._v("jupyter notebook")]),e._v(", root 用户使用 "),t("code",[e._v("jupyter notebook --allow-root")]),e._v("。打开 "),t("code",[e._v("IP:指定的端口")]),e._v(", 输入密码就可以访问了")]),e._v(" "),t("p",[e._v("需要注意的是不能在隐藏目录 (以 . 开头的目录)下启动 jupyter notebook, 否则无法正常访问文件")]),e._v(" "),t("h2",{attrs:{id:"_4-其他配置参数说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-其他配置参数说明"}},[e._v("#")]),e._v(" "),t("em",[t("strong",[e._v("4.其他配置参数说明")])])]),e._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Configuration file for jupyter-notebook.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Application(SingletonConfigurable) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## This is an application.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The date format used by logging formatters for %(asctime)s")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 日志格式化程序用于％（asctime）的日期格式，可以按照时间format自己配置")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: '%Y-%m-%d %H:%M:%S'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Application.log_datefmt = '%Y-%m-%d %H:%M:%S'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The Logging format template")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 记录格式模板")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: '[%(name)s]%(highlevel)s %(message)s'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Application.log_format = '[%(name)s]%(highlevel)s %(message)s'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Set the log level by value or name.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  按值或名称设置日志级别")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Choices: any of [0, 10, 20, 30, 40, 50, 'DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL']")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 30")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Application.log_level = 30")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Instead of starting the Application, dump configuration to stdout")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Application.show_config = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Instead of starting the Application, dump configuration to stdout (as JSON)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Application.show_config_json = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# JupyterApp(Application) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Base class for Jupyter applications")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Answer yes to any prompts.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 对任何提示回答“是”")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.JupyterApp.answer_yes = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Full path of a config file.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 配置文件的完整路径")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.JupyterApp.config_file = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Specify a config file to load.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 指定要加载的配置文件")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.JupyterApp.config_file_name = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Generate default config file.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 生成默认配置文件")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.JupyterApp.generate_config = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The date format used by logging formatters for %(asctime)s")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: Application.log_datefmt")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.JupyterApp.log_datefmt = '%Y-%m-%d %H:%M:%S'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The Logging format template")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: Application.log_format")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.JupyterApp.log_format = '[%(name)s]%(highlevel)s %(message)s'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Set the log level by value or name.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: Application.log_level")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.JupyterApp.log_level = 30")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Instead of starting the Application, dump configuration to stdout")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: Application.show_config")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.JupyterApp.show_config = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Instead of starting the Application, dump configuration to stdout (as JSON)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: Application.show_config_json")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.JupyterApp.show_config_json = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# NotebookApp(JupyterApp) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Set the Access-Control-Allow-Credentials: true header")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.allow_credentials = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Set the Access-Control-Allow-Origin header")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Use '*' to allow any origin to access your server.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Takes precedence over allow_origin_pat.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  设置Access-Control-Allow-Origin标头")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  使用'*'允许任何来源访问您的服务器。")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.allow_origin = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Use a regular expression for the Access-Control-Allow-Origin header")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Requests from an origin matching the expression will get replies with:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      Access-Control-Allow-Origin: origin")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  where `origin` is the origin of the request.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Ignored if allow_origin is set.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.allow_origin_pat = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Allow password to be changed at login for the notebook server.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  While loggin in with a token, the notebook server UI will give the opportunity")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  to the user to enter a new password at the same time that will replace the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  token login mechanism.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  This can be set to false to prevent changing password from the UI/API.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: True")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.allow_password_change = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Allow requests where the Host header doesn't point to a local server")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  By default, requests get a 403 forbidden response if the 'Host' header shows")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  that the browser thinks it's on a non-local domain. Setting this option to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  True disables this check.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  This protects against 'DNS rebinding' attacks, where a remote web server")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  serves you a page and then changes its DNS to send later requests to a local")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  IP, bypassing same-origin checks.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Local IP addresses (such as 127.0.0.1 and ::1) are allowed as local, along")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  with hostnames configured in local_hostnames.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.allow_remote_access = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Whether to allow the user to run the notebook as root.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 是否允许用户以root身份运行notebook。")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.allow_root = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Answer yes to any prompts.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: JupyterApp.answer_yes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.answer_yes = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('## " Require authentication to access prometheus metrics.')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: True")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.authenticate_prometheus = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Reload the webapp when changes are made to any Python src files.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.autoreload = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## DEPRECATED use base_url")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: '/'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.base_project_url = '/'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The base URL for the notebook server.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Leading and trailing slashes can be omitted, and will automatically be added.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: '/'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.base_url = '/'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Specify what command to use to invoke a web browser when opening the notebook.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  If not specified, the default browser will be determined by the `webbrowser`")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  standard library module, which allows setting of the BROWSER environment")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  variable to override it.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.browser = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The full path to an SSL/TLS certificate file.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.certfile = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The full path to a certificate authority certificate for SSL/TLS client")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  authentication.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.client_ca = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Full path of a config file.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: JupyterApp.config_file")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.config_file = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Specify a config file to load.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: JupyterApp.config_file_name")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.config_file_name = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The config manager class to use")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'notebook.services.config.manager.ConfigManager'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.config_manager_class = 'notebook.services.config.manager.ConfigManager'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The notebook manager class to use.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'notebook.services.contents.largefilemanager.LargeFileManager'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.contents_manager_class = 'notebook.services.contents.largefilemanager.LargeFileManager'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Extra keyword arguments to pass to `set_secure_cookie`. See tornado's")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  set_secure_cookie docs for details.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: {}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.cookie_options = {}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The random bytes used to secure cookies. By default this is a new random")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  number every time you start the Notebook. Set it to a value in a config file")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  to enable logins to persist across server sessions.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Note: Cookie secrets should be kept private, do not share config files with")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  cookie_secret stored in plaintext (you can read the value from a file).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: b''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.cookie_secret = b''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The file where the cookie secret is stored.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.cookie_secret_file = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Override URL shown to users.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Replace actual URL, including protocol, address, port and base URL, with the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  given value when displaying URL to the users. Do not change the actual")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  connection URL. If authentication token is enabled, the token is added to the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  custom URL automatically.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  This option is intended to be used when the URL to display to the user cannot")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  be determined reliably by the Jupyter notebook server (proxified or")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  containerized setups for example).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.custom_display_url = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The default URL to redirect to from `/`")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: '/tree'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.default_url = '/tree'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Disable cross-site-request-forgery protection")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Jupyter notebook 4.3.1 introduces protection from cross-site request")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  forgeries, requiring API requests to either:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  - originate from pages served by this server (validated with XSRF cookie and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  token), or - authenticate with a token")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Some anonymous compute resources still desire the ability to run code,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  completely without authentication. These services can disable all")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  authentication and security checks, with the full knowledge of what that")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  implies.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.disable_check_xsrf = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Whether to enable MathJax for typesetting math/TeX")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  MathJax is the javascript library Jupyter uses to render math/LaTeX. It is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  very large, so you may want to disable it if you have a slow internet")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  connection, or for offline use of the notebook.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  When disabled, equations etc. will appear as their untransformed TeX source.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: True")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.enable_mathjax = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## extra paths to look for Javascript notebook extensions")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: []")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.extra_nbextensions_path = []")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## handlers that should be loaded at higher priority than the default services")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: []")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.extra_services = []")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Extra paths to search for serving static files.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  This allows adding javascript/css to be available from the notebook server")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  machine, or overriding individual files in the IPython")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: []")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.extra_static_paths = []")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Extra paths to search for serving jinja templates.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Can be used to override templates from notebook.templates.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: []")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.extra_template_paths = []")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.file_to_run = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Generate default config file.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: JupyterApp.generate_config")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.generate_config = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Extra keyword arguments to pass to `get_secure_cookie`. See tornado's")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  get_secure_cookie docs for details.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: {}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.get_secure_cookie_kwargs = {}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Deprecated: Use minified JS file or not, mainly use during dev to avoid JS")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  recompilation")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.ignore_minified_js = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## (bytes/sec) Maximum rate at which stream output can be sent on iopub before")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  they are limited.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 1000000")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.iopub_data_rate_limit = 1000000")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## (msgs/sec) Maximum rate at which messages can be sent on iopub before they are")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  limited.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 1000")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.iopub_msg_rate_limit = 1000")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The IP address the notebook server will listen on.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'localhost'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.ip = 'localhost'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Supply extra arguments that will be passed to Jinja environment.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: {}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.jinja_environment_options = {}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Extra variables to supply to jinja templates when rendering.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: {}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.jinja_template_vars = {}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The kernel manager class to use.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'notebook.services.kernels.kernelmanager.MappingKernelManager'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.kernel_manager_class = 'notebook.services.kernels.kernelmanager.MappingKernelManager'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The kernel spec manager class to use. Should be a subclass of")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  `jupyter_client.kernelspec.KernelSpecManager`.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  The Api of KernelSpecManager is provisional and might change without warning")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  between this version of Jupyter and the next stable one.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'jupyter_client.kernelspec.KernelSpecManager'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.kernel_spec_manager_class = 'jupyter_client.kernelspec.KernelSpecManager'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The full path to a private key file for usage with SSL/TLS.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.keyfile = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Hostnames to allow as local when allow_remote_access is False.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Local IP addresses (such as 127.0.0.1 and ::1) are automatically accepted as")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  local as well.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ['localhost']")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.local_hostnames = ['localhost']")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The date format used by logging formatters for %(asctime)s")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: Application.log_datefmt")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.log_datefmt = '%Y-%m-%d %H:%M:%S'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The Logging format template")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: Application.log_format")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.log_format = '[%(name)s]%(highlevel)s %(message)s'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('## Set to True to enable JSON formatted logs. Run "pip install notebook[json-')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#  logging]" to install the required dependent packages. Can also be set using')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  the environment variable JUPYTER_ENABLE_JSON_LOGGING=true.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.log_json = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Set the log level by value or name.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: Application.log_level")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.log_level = 30")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The login handler class to use.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'notebook.auth.login.LoginHandler'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.login_handler_class = 'notebook.auth.login.LoginHandler'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The logout handler class to use.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'notebook.auth.logout.LogoutHandler'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.logout_handler_class = 'notebook.auth.logout.LogoutHandler'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The MathJax.js configuration file that is to be used.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'TeX-AMS-MML_HTMLorMML-full,Safe'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.mathjax_config = 'TeX-AMS-MML_HTMLorMML-full,Safe'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## A custom url for MathJax.js. Should be in the form of a case-sensitive url to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  MathJax, for example:  /static/components/MathJax/MathJax.js")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.mathjax_url = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Sets the maximum allowed size of the client request body, specified in the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Content-Length request header field. If the size in a request exceeds the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  configured value, a malformed HTTP message is returned to the client.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Note: max_body_size is applied even in streaming mode.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 536870912")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.max_body_size = 536870912")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Gets or sets the maximum amount of memory, in bytes, that is allocated for use")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  by the buffer manager.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 536870912")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.max_buffer_size = 536870912")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Gets or sets a lower bound on the open file handles process resource limit.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  This may need to be increased if you run into an OSError: [Errno 24] Too many")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  open files. This is not applicable when running on Windows.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.min_open_files_limit = 0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Dict of Python modules to load as notebook server extensions.Entry values can")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  be used to enable and disable the loading ofthe extensions. The extensions")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  will be loaded in alphabetical order.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: {}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.nbserver_extensions = {}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The directory to use for notebooks and kernels.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.notebook_dir = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Whether to open in a browser after starting. The specific browser used is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  platform dependent and determined by the python standard library `webbrowser`")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  module, unless it is overridden using the --browser (NotebookApp.browser)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  configuration option.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: True")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.open_browser = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Hashed password to use for web authentication.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  To generate, type in a python/IPython shell:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    from notebook.auth import passwd; passwd()")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  The string should be of the form type:salt:hashed-password.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.password = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Forces users to use a password for the Notebook server. This is useful in a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  multi user environment, for instance when everybody in the LAN can access each")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  other's machine through ssh.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  In such a case, serving the notebook server on localhost is not secure since")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  any user can connect to the notebook server via ssh.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.password_required = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The port the notebook server will listen on (env: JUPYTER_PORT).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 8888")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.port = 8888")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The number of additional ports to try if the specified port is not available")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  (env: JUPYTER_PORT_RETRIES).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 50")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.port_retries = 50")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## DISABLED: use %pylab or %matplotlib in the notebook to enable matplotlib.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'disabled'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.pylab = 'disabled'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## If True, display a button in the dashboard to quit (shutdown the notebook")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  server).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: True")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.quit_button = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## (sec) Time window used to check the message and data rate limits.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 3")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.rate_limit_window = 3")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Reraise exceptions encountered loading server extensions?")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.reraise_server_extension_failures = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## DEPRECATED use the nbserver_extensions dict instead")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: []")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.server_extensions = []")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The session manager class to use.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'notebook.services.sessions.sessionmanager.SessionManager'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.session_manager_class = 'notebook.services.sessions.sessionmanager.SessionManager'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Instead of starting the Application, dump configuration to stdout")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: Application.show_config")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.show_config = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Instead of starting the Application, dump configuration to stdout (as JSON)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: Application.show_config_json")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.show_config_json = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Shut down the server after N seconds with no kernels or terminals running and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  no activity. This can be used together with culling idle kernels")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  (MappingKernelManager.cull_idle_timeout) to shutdown the notebook server when")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  it's not in use. This is not precisely timed: it may shut down up to a minute")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  later. 0 (the default) disables this automatic shutdown.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.shutdown_no_activity_timeout = 0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The UNIX socket the notebook server will listen on.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.sock = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The permissions mode for UNIX socket creation (default: 0600).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: '0600'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.sock_mode = '0600'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Supply SSL options for the tornado HTTPServer. See the tornado docs for")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  details.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: {}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.ssl_options = {}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('## Supply overrides for terminado. Currently only supports "shell_command". On')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#  Unix, if "shell_command" is not provided, a non-login shell is launched by')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  default when the notebook server is connected to a terminal, a login shell")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  otherwise.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: {}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.terminado_settings = {}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Set to False to disable terminals.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  This does *not* make the notebook server more secure by itself. Anything the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  user can in a terminal, they can also do in a notebook.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Terminals may also be automatically disabled if the terminado package is not")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  available.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: True")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.terminals_enabled = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Token used for authenticating first-time connections to the server.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  The token can be read from the file referenced by JUPYTER_TOKEN_FILE or set")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  directly with the JUPYTER_TOKEN environment variable.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  When no password is enabled, the default is to generate a new, random token.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Setting to an empty string disables authentication altogether, which is NOT")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  RECOMMENDED.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: '<generated>'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.token = '<generated>'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Supply overrides for the tornado.web.Application that the Jupyter notebook")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  uses.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: {}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.tornado_settings = {}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Whether to trust or not X-Scheme/X-Forwarded-Proto and X-Real-Ip/X-Forwarded-")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  For headerssent by the upstream reverse proxy. Necessary if the proxy handles")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  SSL")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.trust_xheaders = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Disable launching browser by redirect file")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  For versions of notebook > 5.7.2, a security feature measure was added that")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  prevented the authentication token used to launch the browser from being")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  visible. This feature makes it difficult for other users on a multi-user")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  system from running code in your Jupyter session as you.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  However, some environments (like Windows Subsystem for Linux (WSL) and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Chromebooks), launching a browser using a redirect file can lead the browser")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  failing to load. This is because of the difference in file structures/paths")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  between the runtime and the browser.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Disabling this setting to False will disable this behavior, allowing the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  browser to launch by using a URL and visible token (as before).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: True")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.use_redirect_file = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## DEPRECATED, use tornado_settings")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: {}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.webapp_settings = {}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Specify Where to open the notebook on startup. This is the `new` argument")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  passed to the standard library method `webbrowser.open`. The behaviour is not")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  guaranteed, but depends on browser support. Valid values are:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - 2 opens a new tab,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - 1 opens a new window,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - 0 opens in an existing window.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See the `webbrowser.open` documentation for details.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 2")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.webbrowser_open_new = 2")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Set the tornado compression options for websocket connections.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  This value will be returned from")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  :meth:`WebSocketHandler.get_compression_options`. None (default) will disable")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  compression. A dict (even an empty one) will enable compression.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See the tornado docs for WebSocketHandler.get_compression_options for details.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: None")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.websocket_compression_options = None")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The base URL for websockets, if it differs from the HTTP server (hint: it")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  almost certainly doesn't).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Should be in the form of an HTTP origin: ws[s]://hostname[:port]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookApp.websocket_url = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ConnectionFileMixin(LoggingConfigurable) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Mixin for configurable classes that work with connection files")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## JSON file in which to store connection info [default: kernel-<pid>.json]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  This file will contain the IP, ports, and authentication key needed to connect")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  clients to this kernel. By default, this file will be created in the security")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  dir of the current profile, but can be specified by absolute path.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ConnectionFileMixin.connection_file = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## set the control (ROUTER) port [default: random]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ConnectionFileMixin.control_port = 0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## set the heartbeat port [default: random]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ConnectionFileMixin.hb_port = 0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## set the iopub (PUB) port [default: random]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ConnectionFileMixin.iopub_port = 0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Set the kernel's IP address [default localhost]. If the IP address is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  something other than localhost, then Consoles on other machines will be able")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  to connect to the Kernel, so be careful!")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ConnectionFileMixin.ip = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## set the shell (ROUTER) port [default: random]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ConnectionFileMixin.shell_port = 0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## set the stdin (ROUTER) port [default: random]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ConnectionFileMixin.stdin_port = 0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Choices: any of ['tcp', 'ipc'] (case-insensitive)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'tcp'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ConnectionFileMixin.transport = 'tcp'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# KernelManager(ConnectionFileMixin) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Manages a single kernel in a subprocess on this host.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  This version starts kernels with Popen.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Should we autorestart the kernel if it dies.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: True")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.KernelManager.autorestart = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## JSON file in which to store connection info [default: kernel-<pid>.json]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ConnectionFileMixin.connection_file")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.KernelManager.connection_file = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## set the control (ROUTER) port [default: random]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ConnectionFileMixin.control_port")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.KernelManager.control_port = 0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## set the heartbeat port [default: random]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ConnectionFileMixin.hb_port")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.KernelManager.hb_port = 0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## set the iopub (PUB) port [default: random]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ConnectionFileMixin.iopub_port")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.KernelManager.iopub_port = 0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Set the kernel's IP address [default localhost].")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ConnectionFileMixin.ip")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.KernelManager.ip = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## DEPRECATED: Use kernel_name instead.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  The Popen Command to launch the kernel. Override this if you have a custom")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  kernel. If kernel_cmd is specified in a configuration file, Jupyter does not")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  pass any arguments to the kernel, because it cannot make any assumptions about")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  the arguments that the kernel understands. In particular, this means that the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  kernel does not receive the option --debug if it given on the Jupyter command")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  line.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: []")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.KernelManager.kernel_cmd = []")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## set the shell (ROUTER) port [default: random]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ConnectionFileMixin.shell_port")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.KernelManager.shell_port = 0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Time to wait for a kernel to terminate before killing it, in seconds. When a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  shutdown request is initiated, the kernel will be immediately send and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  interrupt (SIGINT), followedby a shutdown_request message, after 1/2 of")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  `shutdown_wait_time`it will be sent a terminate (SIGTERM) request, and finally")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  at the end of `shutdown_wait_time` will be killed (SIGKILL). terminate and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  kill may be equivalent on windows.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 5.0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.KernelManager.shutdown_wait_time = 5.0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## set the stdin (ROUTER) port [default: random]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ConnectionFileMixin.stdin_port")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.KernelManager.stdin_port = 0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ConnectionFileMixin.transport")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.KernelManager.transport = 'tcp'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Session(Configurable) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Object for handling serialization and sending of messages.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  The Session object handles building messages and sending them with ZMQ sockets")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  or ZMQStream objects.  Objects can communicate with each other over the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  network via Session objects, and only need to work with the dict-based IPython")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  message spec. The Session will handle serialization/deserialization, security,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  and metadata.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Sessions support configurable serialization via packer/unpacker traits, and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  signing with HMAC digests via the key/keyfile traits.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Parameters ----------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  debug : bool")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      whether to trigger extra debugging statements")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  packer/unpacker : str : 'json', 'pickle' or import_string")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      importstrings for methods to serialize message parts.  If just")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      'json' or 'pickle', predefined JSON and pickle packers will be used.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      Otherwise, the entire importstring must be used.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      The functions must accept at least valid JSON input, and output *bytes*.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      For example, to use msgpack:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      packer = 'msgpack.packb', unpacker='msgpack.unpackb'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  pack/unpack : callables")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      You can also set the pack/unpack callables for serialization directly.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  session : bytes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      the ID of this Session object.  The default is to generate a new UUID.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  username : unicode")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      username added to message headers.  The default is to ask the OS.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  key : bytes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      The key used to initialize an HMAC signature.  If unset, messages")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      will not be signed or checked.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  keyfile : filepath")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      The file containing a key.  If this is set, `key` will be initialized")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      to the contents of the file.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Threshold (in bytes) beyond which an object's buffer should be extracted to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  avoid pickling.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 1024")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Session.buffer_threshold = 1024")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Whether to check PID to protect against calls after fork.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  This check can be disabled if fork-safety is handled elsewhere.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: True")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Session.check_pid = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Threshold (in bytes) beyond which a buffer should be sent without copying.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 65536")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Session.copy_threshold = 65536")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Debug output in the Session")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Session.debug = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The maximum number of digests to remember.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  The digest history will be culled when it exceeds this value.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 65536")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Session.digest_history_size = 65536")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The maximum number of items for a container to be introspected for custom")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  serialization. Containers larger than this are pickled outright.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 64")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Session.item_threshold = 64")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## execution key, for signing messages.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: b''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Session.key = b''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## path to file containing execution key.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Session.keyfile = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Metadata dictionary, which serves as the default top-level metadata dict for")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  each message.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: {}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Session.metadata = {}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The name of the packer for serializing messages. Should be one of 'json',")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  'pickle', or an import name for a custom callable serializer.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'json'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Session.packer = 'json'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The UUID identifying this session.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Session.session = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The digest scheme used to construct the message signatures. Must have the form")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  'hmac-HASH'.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'hmac-sha256'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Session.signature_scheme = 'hmac-sha256'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The name of the unpacker for unserializing messages. Only used with custom")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  functions for `packer`.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'json'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Session.unpacker = 'json'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Username for the Session. Default is your system username.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'username'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.Session.username = 'username'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# MultiKernelManager(LoggingConfigurable) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## A class for managing multiple kernels.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The name of the default kernel to start")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'python3'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.MultiKernelManager.default_kernel_name = 'python3'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The kernel manager class.  This is configurable to allow subclassing of the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  KernelManager for customized behavior.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'jupyter_client.ioloop.IOLoopKernelManager'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.MultiKernelManager.kernel_manager_class = 'jupyter_client.ioloop.IOLoopKernelManager'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Share a single zmq.Context to talk to all my kernels")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: True")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.MultiKernelManager.shared_context = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# MappingKernelManager(MultiKernelManager) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## A KernelManager that handles notebook mapping and HTTP error handling")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## White list of allowed kernel message types. When the list is empty, all")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  message types are allowed.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: []")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.MappingKernelManager.allowed_message_types = []")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Whether messages from kernels whose frontends have disconnected should be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  buffered in-memory. When True (default), messages are buffered and replayed on")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  reconnect, avoiding lost messages due to interrupted connectivity. Disable if")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  long-running kernels will produce too much output while no frontends are")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  connected.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: True")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.MappingKernelManager.buffer_offline_messages = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Whether to consider culling kernels which are busy. Only effective if")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  cull_idle_timeout > 0.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.MappingKernelManager.cull_busy = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Whether to consider culling kernels which have one or more connections. Only")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  effective if cull_idle_timeout > 0.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.MappingKernelManager.cull_connected = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Timeout (in seconds) after which a kernel is considered idle and ready to be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  culled. Values of 0 or lower disable culling. Very short timeouts may result")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  in kernels being culled for users with poor network connections.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.MappingKernelManager.cull_idle_timeout = 0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The interval (in seconds) on which to check for idle kernels exceeding the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  cull timeout value.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 300")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.MappingKernelManager.cull_interval = 300")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The name of the default kernel to start")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MultiKernelManager.default_kernel_name")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.MappingKernelManager.default_kernel_name = 'python3'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Timeout for giving up on a kernel (in seconds). On starting and restarting")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  kernels, we check whether the kernel is running and responsive by sending")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  kernel_info_requests. This sets the timeout in seconds for how long the kernel")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  can take before being presumed dead. This affects the MappingKernelManager")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  (which handles kernel restarts) and the ZMQChannelsHandler (which handles the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  startup).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 60")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.MappingKernelManager.kernel_info_timeout = 60")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The kernel manager class.  This is configurable to allow")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MultiKernelManager.kernel_manager_class")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.MappingKernelManager.kernel_manager_class = 'jupyter_client.ioloop.IOLoopKernelManager'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.MappingKernelManager.root_dir = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Share a single zmq.Context to talk to all my kernels")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MultiKernelManager.shared_context")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.MappingKernelManager.shared_context = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# KernelSpecManager(LoggingConfigurable) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## If there is no Python kernelspec registered and the IPython kernel is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  available, ensure it is added to the spec list.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: True")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.KernelSpecManager.ensure_native_kernel = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The kernel spec class.  This is configurable to allow subclassing of the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  KernelSpecManager for customized behavior.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'jupyter_client.kernelspec.KernelSpec'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.KernelSpecManager.kernel_spec_class = 'jupyter_client.kernelspec.KernelSpec'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Whitelist of allowed kernel names.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  By default, all installed kernels are allowed.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: set()")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.KernelSpecManager.whitelist = set()")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ContentsManager(LoggingConfigurable) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Base class for serving files and directories.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  This serves any text or binary file, as well as directories, with special")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  handling for JSON notebook documents.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Most APIs take a path argument, which is always an API-style unicode path, and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  always refers to a directory.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  - unicode, not url-escaped")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  - '/'-separated")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  - leading and trailing '/' will be stripped")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  - if unspecified, path defaults to '',")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    indicating the root path.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Allow access to hidden files")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ContentsManager.allow_hidden = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: None")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ContentsManager.checkpoints = None")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'notebook.services.contents.checkpoints.Checkpoints'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ContentsManager.checkpoints_class = 'notebook.services.contents.checkpoints.Checkpoints'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: {}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ContentsManager.checkpoints_kwargs = {}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## handler class to use when serving raw file requests.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default is a fallback that talks to the ContentsManager API, which may be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  inefficient, especially for large files.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Local files-based ContentsManagers can use a StaticFileHandler subclass, which")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  will be much more efficient.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Access to these files should be Authenticated.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'notebook.files.handlers.FilesHandler'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ContentsManager.files_handler_class = 'notebook.files.handlers.FilesHandler'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Extra parameters to pass to files_handler_class.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  For example, StaticFileHandlers generally expect a `path` argument specifying")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  the root directory from which to serve files.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: {}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ContentsManager.files_handler_params = {}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Glob patterns to hide in file and directory listings.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ['__pycache__', '*.pyc', '*.pyo', '.DS_Store', '*.so', '*.dylib', '*~']")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ContentsManager.hide_globs = ['__pycache__', '*.pyc', '*.pyo', '.DS_Store', '*.so', '*.dylib', '*~']")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Python callable or importstring thereof")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  To be called on a contents model prior to save.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  This can be used to process the structure, such as removing notebook outputs")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  or other side effects that should not be saved.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  It will be called as (all arguments passed by keyword)::")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      hook(path=path, model=model, contents_manager=self)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  - model: the model to be saved. Includes file contents.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    Modifying this dict will affect the file that is stored.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  - path: the API path of the save destination")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  - contents_manager: this ContentsManager instance")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: None")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ContentsManager.pre_save_hook = None")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: '/'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ContentsManager.root_dir = '/'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The base name used when creating untitled directories.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'Untitled Folder'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ContentsManager.untitled_directory = 'Untitled Folder'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The base name used when creating untitled files.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'untitled'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ContentsManager.untitled_file = 'untitled'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The base name used when creating untitled notebooks.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'Untitled'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.ContentsManager.untitled_notebook = 'Untitled'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# FileManagerMixin(Configurable) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Mixin for ContentsAPI classes that interact with the filesystem.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Provides facilities for reading, writing, and copying both notebooks and")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  generic files.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Shared by FileContentsManager and FileCheckpoints.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Note ---- Classes using this mixin must provide the following attributes:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  root_dir : unicode")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      A directory against which API-style paths are to be resolved.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  log : logging.Logger")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## By default notebooks are saved on disk on a temporary file and then if")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  successfully written, it replaces the old ones. This procedure, namely")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  'atomic_writing', causes some bugs on file system without operation order")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  enforcement (like some networked fs). If set to False, the new notebook is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  written directly on the old one which could fail (eg: full filesystem or quota")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  )")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: True")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileManagerMixin.use_atomic_writing = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# FileContentsManager(FileManagerMixin, ContentsManager) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Allow access to hidden files")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ContentsManager.allow_hidden")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileContentsManager.allow_hidden = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ContentsManager.checkpoints")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileContentsManager.checkpoints = None")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ContentsManager.checkpoints_class")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileContentsManager.checkpoints_class = 'notebook.services.contents.checkpoints.Checkpoints'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ContentsManager.checkpoints_kwargs")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileContentsManager.checkpoints_kwargs = {}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## If True (default), deleting files will send them to the platform's")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  trash/recycle bin, where they can be recovered. If False, deleting files")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  really deletes them.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: True")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileContentsManager.delete_to_trash = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## handler class to use when serving raw file requests.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ContentsManager.files_handler_class")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileContentsManager.files_handler_class = 'notebook.files.handlers.FilesHandler'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Extra parameters to pass to files_handler_class.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ContentsManager.files_handler_params")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileContentsManager.files_handler_params = {}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ContentsManager.hide_globs")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileContentsManager.hide_globs = ['__pycache__', '*.pyc', '*.pyo', '.DS_Store', '*.so', '*.dylib', '*~']")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Python callable or importstring thereof")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  to be called on the path of a file just saved.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  This can be used to process the file on disk, such as converting the notebook")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  to a script or HTML via nbconvert.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  It will be called as (all arguments passed by keyword)::")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#      hook(os_path=os_path, model=model, contents_manager=instance)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  - path: the filesystem path to the file just written - model: the model")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  representing the file - contents_manager: this ContentsManager instance")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: None")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileContentsManager.post_save_hook = None")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Python callable or importstring thereof")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ContentsManager.pre_save_hook")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileContentsManager.pre_save_hook = None")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileContentsManager.root_dir = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## DEPRECATED, use post_save_hook. Will be removed in Notebook 5.0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: False")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileContentsManager.save_script = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The base name used when creating untitled directories.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ContentsManager.untitled_directory")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileContentsManager.untitled_directory = 'Untitled Folder'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The base name used when creating untitled files.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ContentsManager.untitled_file")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileContentsManager.untitled_file = 'untitled'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The base name used when creating untitled notebooks.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: ContentsManager.untitled_notebook")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileContentsManager.untitled_notebook = 'Untitled'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## By default notebooks are saved on disk on a temporary file and then if")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  successfully written, it replaces the old ones.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: FileManagerMixin.use_atomic_writing")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.FileContentsManager.use_atomic_writing = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# NotebookNotary(LoggingConfigurable) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## A class for computing and verifying notebook signatures.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The hashing algorithm used to sign notebooks.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Choices: any of ['sha384', 'sha3_512', 'sha512', 'sha3_384', 'sha256', 'blake2s', 'sha1', 'sha224', 'blake2b', 'md5', 'sha3_256', 'sha3_224']")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'sha256'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookNotary.algorithm = 'sha256'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The storage directory for notary secret and database.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookNotary.data_dir = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The sqlite file in which to store notebook signatures. By default, this will")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  be in your Jupyter data directory. You can set it to ':memory:' to disable")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  sqlite writing to the filesystem.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookNotary.db_file = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The secret key with which notebooks are signed.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: b''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookNotary.secret = b''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The file where the secret key is stored.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookNotary.secret_file = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## A callable returning the storage backend for notebook signatures. The default")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  uses an SQLite database.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: traitlets.Undefined")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.NotebookNotary.store_factory = traitlets.Undefined")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# AsyncMultiKernelManager(MultiKernelManager) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The name of the default kernel to start")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MultiKernelManager.default_kernel_name")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.AsyncMultiKernelManager.default_kernel_name = 'python3'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The kernel manager class.  This is configurable to allow subclassing of the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  AsyncKernelManager for customized behavior.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 'jupyter_client.ioloop.AsyncIOLoopKernelManager'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.AsyncMultiKernelManager.kernel_manager_class = 'jupyter_client.ioloop.AsyncIOLoopKernelManager'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Share a single zmq.Context to talk to all my kernels")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MultiKernelManager.shared_context")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.AsyncMultiKernelManager.shared_context = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# AsyncMappingKernelManager(MappingKernelManager, AsyncMultiKernelManager) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## White list of allowed kernel message types.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MappingKernelManager.allowed_message_types")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.AsyncMappingKernelManager.allowed_message_types = []")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Whether messages from kernels whose frontends have disconnected should be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  buffered in-memory.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MappingKernelManager.buffer_offline_messages")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.AsyncMappingKernelManager.buffer_offline_messages = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Whether to consider culling kernels which are busy.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MappingKernelManager.cull_busy")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.AsyncMappingKernelManager.cull_busy = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Whether to consider culling kernels which have one or more connections.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MappingKernelManager.cull_connected")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.AsyncMappingKernelManager.cull_connected = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Timeout (in seconds) after which a kernel is considered idle and ready to be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  culled.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MappingKernelManager.cull_idle_timeout")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.AsyncMappingKernelManager.cull_idle_timeout = 0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The interval (in seconds) on which to check for idle kernels exceeding the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  cull timeout value.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MappingKernelManager.cull_interval")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.AsyncMappingKernelManager.cull_interval = 300")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The name of the default kernel to start")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MultiKernelManager.default_kernel_name")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.AsyncMappingKernelManager.default_kernel_name = 'python3'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Timeout for giving up on a kernel (in seconds).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MappingKernelManager.kernel_info_timeout")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.AsyncMappingKernelManager.kernel_info_timeout = 60")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The kernel manager class.  This is configurable to allow")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: AsyncMultiKernelManager.kernel_manager_class")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.AsyncMappingKernelManager.kernel_manager_class = 'jupyter_client.ioloop.AsyncIOLoopKernelManager'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MappingKernelManager.root_dir")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.AsyncMappingKernelManager.root_dir = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Share a single zmq.Context to talk to all my kernels")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MultiKernelManager.shared_context")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.AsyncMappingKernelManager.shared_context = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# GatewayKernelManager(AsyncMappingKernelManager) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Kernel manager that supports remote kernels hosted by Jupyter Kernel or")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Enterprise Gateway.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## White list of allowed kernel message types.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MappingKernelManager.allowed_message_types")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayKernelManager.allowed_message_types = []")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Whether messages from kernels whose frontends have disconnected should be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  buffered in-memory.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MappingKernelManager.buffer_offline_messages")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayKernelManager.buffer_offline_messages = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Whether to consider culling kernels which are busy.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MappingKernelManager.cull_busy")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayKernelManager.cull_busy = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Whether to consider culling kernels which have one or more connections.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MappingKernelManager.cull_connected")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayKernelManager.cull_connected = False")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Timeout (in seconds) after which a kernel is considered idle and ready to be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  culled.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MappingKernelManager.cull_idle_timeout")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayKernelManager.cull_idle_timeout = 0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The interval (in seconds) on which to check for idle kernels exceeding the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  cull timeout value.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MappingKernelManager.cull_interval")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayKernelManager.cull_interval = 300")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The name of the default kernel to start")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MultiKernelManager.default_kernel_name")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayKernelManager.default_kernel_name = 'python3'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Timeout for giving up on a kernel (in seconds).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MappingKernelManager.kernel_info_timeout")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayKernelManager.kernel_info_timeout = 60")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The kernel manager class.  This is configurable to allow")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: AsyncMultiKernelManager.kernel_manager_class")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayKernelManager.kernel_manager_class = 'jupyter_client.ioloop.AsyncIOLoopKernelManager'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MappingKernelManager.root_dir")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayKernelManager.root_dir = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Share a single zmq.Context to talk to all my kernels")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: MultiKernelManager.shared_context")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayKernelManager.shared_context = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# GatewayKernelSpecManager(KernelSpecManager) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## If there is no Python kernelspec registered and the IPython")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: KernelSpecManager.ensure_native_kernel")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayKernelSpecManager.ensure_native_kernel = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The kernel spec class.  This is configurable to allow")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: KernelSpecManager.kernel_spec_class")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayKernelSpecManager.kernel_spec_class = 'jupyter_client.kernelspec.KernelSpec'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Whitelist of allowed kernel names.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  See also: KernelSpecManager.whitelist")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayKernelSpecManager.whitelist = set()")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# GatewayClient(SingletonConfigurable) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## This class manages the configuration.  It's its own singleton class so that we")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  can share these values across all objects.  It also contains some helper")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  methods to build request arguments out of the various config options.")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The authorization token used in the HTTP headers.  (JUPYTER_GATEWAY_AUTH_TOKEN")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: None")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.auth_token = None")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The filename of CA certificates or None to use defaults.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  (JUPYTER_GATEWAY_CA_CERTS env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: None")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.ca_certs = None")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The filename for client SSL certificate, if any.  (JUPYTER_GATEWAY_CLIENT_CERT")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: None")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.client_cert = None")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The filename for client SSL key, if any.  (JUPYTER_GATEWAY_CLIENT_KEY env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: None")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.client_key = None")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The time allowed for HTTP connection establishment with the Gateway server.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  (JUPYTER_GATEWAY_CONNECT_TIMEOUT env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 40.0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.connect_timeout = 40.0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## A comma-separated list of environment variable names that will be included,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  along with their values, in the kernel startup request.  The corresponding")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  `env_whitelist` configuration value must also be set on the Gateway server -")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  since that configuration value indicates which environmental values to make")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  available to the kernel. (JUPYTER_GATEWAY_ENV_WHITELIST env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: ''")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.env_whitelist = ''")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The time allowed for HTTP reconnection with the Gateway server for the first")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  time. Next will be JUPYTER_GATEWAY_RETRY_INTERVAL multiplied by two in factor")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  of numbers of retries but less than JUPYTER_GATEWAY_RETRY_INTERVAL_MAX.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  (JUPYTER_GATEWAY_RETRY_INTERVAL env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 1.0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.gateway_retry_interval = 1.0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The maximum time allowed for HTTP reconnection retry with the Gateway server.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  (JUPYTER_GATEWAY_RETRY_INTERVAL_MAX env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 30.0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.gateway_retry_interval_max = 30.0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The maximum retries allowed for HTTP reconnection with the Gateway server.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  (JUPYTER_GATEWAY_RETRY_MAX env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 5")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.gateway_retry_max = 5")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Additional HTTP headers to pass on the request.  This value will be converted")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  to a dict. (JUPYTER_GATEWAY_HEADERS env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: '{}'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.headers = '{}'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The password for HTTP authentication.  (JUPYTER_GATEWAY_HTTP_PWD env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: None")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.http_pwd = None")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The username for HTTP authentication. (JUPYTER_GATEWAY_HTTP_USER env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: None")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.http_user = None")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The gateway API endpoint for accessing kernel resources")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  (JUPYTER_GATEWAY_KERNELS_ENDPOINT env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: '/api/kernels'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.kernels_endpoint = '/api/kernels'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The gateway API endpoint for accessing kernelspecs")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  (JUPYTER_GATEWAY_KERNELSPECS_ENDPOINT env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: '/api/kernelspecs'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.kernelspecs_endpoint = '/api/kernelspecs'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The gateway endpoint for accessing kernelspecs resources")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  (JUPYTER_GATEWAY_KERNELSPECS_RESOURCE_ENDPOINT env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: '/kernelspecs'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.kernelspecs_resource_endpoint = '/kernelspecs'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The time allowed for HTTP request completion. (JUPYTER_GATEWAY_REQUEST_TIMEOUT")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 40.0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.request_timeout = 40.0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The url of the Kernel or Enterprise Gateway server where kernel specifications")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  are defined and kernel management takes place. If defined, this Notebook")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  server acts as a proxy for all kernel management and kernel specification")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  retrieval.  (JUPYTER_GATEWAY_URL env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: None")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.url = None")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## For HTTPS requests, determines if server's certificate should be validated or")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  not. (JUPYTER_GATEWAY_VALIDATE_CERT env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: True")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.validate_cert = True")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The websocket url of the Kernel or Enterprise Gateway server.  If not")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  provided, this value will correspond to the value of the Gateway url with 'ws'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  in place of 'http'.  (JUPYTER_GATEWAY_WS_URL env var)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: None")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.GatewayClient.ws_url = None")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# TerminalManager(LoggingConfigurable) configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#------------------------------------------------------------------------------")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## ")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Timeout (in seconds) in which a terminal has been inactive and ready to be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  culled. Values of 0 or lower disable culling.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.TerminalManager.cull_inactive_timeout = 0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The interval (in seconds) on which to check for terminals exceeding the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  inactive timeout value.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  Default: 300")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# c.TerminalManager.cull_interval = 300")]),e._v("\n\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);